name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: messenger_api
  TASK_DEFINITION_FAMILY: messenger-api-task
  ECS_SERVICE: MessengerService # set this to your Amazon ECS service name
  ECS_CLUSTER: MessengerAPIDev # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .github/workflows/.aws/task_definition.json # set this to the path to your Amazon ECS task definition
  CONTAINER_NAME: messenger_api # set this to the name of the container

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # get secrets from github repos that give the AmazonEC2ContainerRegistryFullAccess policy
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Prepare API Utils Repos SSH Key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.API_UTILS_SSH_KEY }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          DOCKER_BUILDKIT=1 docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --ssh github_ssh_key=${{ env.SSH_AUTH_SOCK }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        id: download-task
        run: |
          aws ecs describe-task-definition \
          --task-definition ${{ env.TASK_DEFINITION_FAMILY }} \
          --query taskDefinition > task-definition.json

          echo "::set-output name=revision::$(($(cat task-definition.json | jq .revision) - 1))"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: De-register (latest-1) revision
        if: ${{ steps.download-task.outputs.revision > 0 }}
        run: |
          aws ecs deregister-task-definition \
            --task-definition  ${{ env.TASK_DEFINITION_FAMILY }}:${{ steps.download-task.outputs.revision }}
